pub fn cube_vertices(length: f32) -> [[f32; 3]; 24] {
    let sp = bevy::render::mesh::shape::Box::new(length, length, length);
    [
        [sp.min_x, sp.min_y, sp.max_z],
        [sp.max_x, sp.min_y, sp.max_z],
        [sp.max_x, sp.max_y, sp.max_z],
        [sp.min_x, sp.max_y, sp.max_z],
        [sp.min_x, sp.max_y, sp.min_z],
        [sp.max_x, sp.max_y, sp.min_z],
        [sp.max_x, sp.min_y, sp.min_z],
        [sp.min_x, sp.min_y, sp.min_z],
        [sp.max_x, sp.min_y, sp.min_z],
        [sp.max_x, sp.max_y, sp.min_z],
        [sp.max_x, sp.max_y, sp.max_z],
        [sp.max_x, sp.min_y, sp.max_z],
        [sp.min_x, sp.min_y, sp.max_z],
        [sp.min_x, sp.max_y, sp.max_z],
        [sp.min_x, sp.max_y, sp.min_z],
        [sp.min_x, sp.min_y, sp.min_z],
        [sp.max_x, sp.max_y, sp.min_z],
        [sp.min_x, sp.max_y, sp.min_z],
        [sp.min_x, sp.max_y, sp.max_z],
        [sp.max_x, sp.max_y, sp.max_z],
        [sp.max_x, sp.min_y, sp.max_z],
        [sp.min_x, sp.min_y, sp.max_z],
        [sp.min_x, sp.min_y, sp.min_z],
        [sp.max_x, sp.min_y, sp.min_z],
    ]
}

pub fn cube_indices(i: u32) -> Vec<u32> {
    vec![
        i * 24 + 0,
        i * 24 + 1,
        i * 24 + 2,
        i * 24 + 2,
        i * 24 + 3,
        i * 24 + 0, // top
        i * 24 + 4,
        i * 24 + 5,
        i * 24 + 6,
        i * 24 + 6,
        i * 24 + 7,
        i * 24 + 4, // bottom
        i * 24 + 8,
        i * 24 + 9,
        i * 24 + 10,
        i * 24 + 10,
        i * 24 + 11,
        i * 24 + 8, // right
        i * 24 + 12,
        i * 24 + 13,
        i * 24 + 14,
        i * 24 + 14,
        i * 24 + 15,
        i * 24 + 12, // left
        i * 24 + 16,
        i * 24 + 17,
        i * 24 + 18,
        i * 24 + 18,
        i * 24 + 19,
        i * 24 + 16, // front
        i * 24 + 20,
        i * 24 + 21,
        i * 24 + 22,
        i * 24 + 22,
        i * 24 + 23,
        i * 24 + 20, // back
    ]
}

pub const CUBOID_NORMALS: [[f32; 3]; 24] = [
    [0., 0., 1.0],
    [0., 0., 1.0],
    [0., 0., 1.0],
    [0., 0., 1.0],
    [0., 0., -1.0],
    [0., 0., -1.0],
    [0., 0., -1.0],
    [0., 0., -1.0],
    [1.0, 0., 0.],
    [1.0, 0., 0.],
    [1.0, 0., 0.],
    [1.0, 0., 0.],
    [-1.0, 0., 0.],
    [-1.0, 0., 0.],
    [-1.0, 0., 0.],
    [-1.0, 0., 0.],
    [0., 1.0, 0.],
    [0., 1.0, 0.],
    [0., 1.0, 0.],
    [0., 1.0, 0.],
    [0., -1.0, 0.],
    [0., -1.0, 0.],
    [0., -1.0, 0.],
    [0., -1.0, 0.],
];

pub const CUBOID_UVS: [[f32; 2]; 24] = [
    [0., 0.],
    [1.0, 0.],
    [1.0, 1.0],
    [0., 1.0],
    [1.0, 0.],
    [0., 0.],
    [0., 1.0],
    [1.0, 1.0],
    [0., 0.],
    [1.0, 0.],
    [1.0, 1.0],
    [0., 1.0],
    [1.0, 0.],
    [0., 0.],
    [0., 1.0],
    [1.0, 1.0],
    [1.0, 0.],
    [0., 0.],
    [0., 1.0],
    [1.0, 1.0],
    [0., 0.],
    [1.0, 0.],
    [1.0, 1.0],
    [0., 1.0],
];
